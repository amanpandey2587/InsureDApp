{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/HealthInsurance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract HealthInsurance is Ownable, ReentrancyGuard {\n    // Struct to represent an insurance policy\n    struct Policy {\n        uint256 id;\n        address policyholder;\n        uint256 coverageAmount;\n        uint256 premium;\n        uint256 startDate;\n        uint256 endDate;\n        bool isActive;\n    }\n\n    // Struct to represent a claim\n    struct Claim {\n        uint256 id;\n        uint256 policyId;\n        uint256 claimAmount;\n        uint256 submissionDate;\n        ClaimStatus status;\n        string medicalDocuments;\n    }\n\n    // Enum for claim status\n    enum ClaimStatus {\n        Pending,\n        Approved,\n        Rejected\n    }\n\n    // Mappings\n    mapping(address => Policy[]) public userPolicies;\n    mapping(uint256 => Claim) public claims;\n    mapping(address => uint256[]) public userClaims;\n\n    // Policy and Claim Counters\n    uint256 public policyCounter;\n    uint256 public claimCounter;\n\n    // Insurance plan details\n    uint256 public constant MIN_COVERAGE = 1 * 10**18; // 1 USDC\n    uint256 public constant MAX_COVERAGE = 1000000 * 10**18; // 1,000,000 USDC\n    uint256 public constant MIN_PREMIUM_PERCENTAGE = 1; // 5%\n    uint256 public constant MAX_PREMIUM_PERCENTAGE = 20; // 20%\n\n    // Events\n    event PolicyPurchased(\n        address indexed policyholder, \n        uint256 indexed policyId, \n        uint256 coverageAmount, \n        uint256 premium\n    );\n    event ClaimSubmitted(\n        address indexed policyholder, \n        uint256 indexed claimId, \n        uint256 claimAmount\n    );\n    event ClaimProcessed(\n        uint256 indexed claimId, \n        ClaimStatus status\n    );\n\n    function getUserPolicies(address user) public view returns (Policy[] memory) {\n        return userPolicies[user];\n    }\n\n    function getUserClaims(address user) public view returns (uint256[] memory) {\n        return userClaims[user];\n    }\n\n    function getClaimDetails(uint256 claimId) public view returns (Claim memory) {\n        return claims[claimId];\n    }\n\n    function getPolicyDetails(address user, uint256 policyIndex) public view returns (Policy memory) {\n        return userPolicies[user][policyIndex];\n    }\n    \n    // Purchase a new health insurance policy\n    function purchasePolicy(uint256 coverageAmount) external payable nonReentrant {\n        // Validate coverage amount\n        require(\n            coverageAmount >= MIN_COVERAGE && \n            coverageAmount <= MAX_COVERAGE, \n            \"Invalid coverage amount\"\n        );\n\n        // Calculate premium (simplified calculation)\n        uint256 premium = calculatePremium(coverageAmount);\n        require(msg.value >= premium, \"Insufficient premium payment\");\n\n        // Create new policy\n        Policy memory newPolicy = Policy({\n            id: policyCounter,\n            policyholder: msg.sender,\n            coverageAmount: coverageAmount,\n            premium: premium,\n            startDate: block.timestamp,\n            endDate: block.timestamp + 365 days, // 1 year policy\n            isActive: true\n        });\n\n        // Store policy\n        userPolicies[msg.sender].push(newPolicy);\n        policyCounter++;\n\n        // Emit event\n        emit PolicyPurchased(msg.sender, newPolicy.id, coverageAmount, premium);\n\n        // Refund excess payment\n        if (msg.value > premium) {\n            payable(msg.sender).transfer(msg.value - premium);\n        }\n    }\n\n    // Submit a claim\n    function submitClaim(\n        uint256 policyId, \n        uint256 claimAmount, \n        string memory medicalDocuments\n    ) external nonReentrant {\n        // Find the policy\n        Policy storage policy = _findUserPolicy(policyId);\n        \n        // Validate claim\n        require(policy.isActive, \"Policy is not active\");\n        require(\n            claimAmount <= policy.coverageAmount, \n            \"Claim amount exceeds coverage\"\n        );\n\n        // Create claim\n        Claim memory newClaim = Claim({\n            id: claimCounter,\n            policyId: policyId,\n            claimAmount: claimAmount,\n            submissionDate: block.timestamp,\n            status: ClaimStatus.Pending,\n            medicalDocuments: medicalDocuments\n        });\n\n        // Store claim\n        claims[claimCounter] = newClaim;\n        userClaims[msg.sender].push(claimCounter);\n        claimCounter++;\n\n        // Emit event\n        emit ClaimSubmitted(msg.sender, newClaim.id, claimAmount);\n    }\n\n    // Process a claim (only by owner/admin)\n    function processClaim(\n        uint256 claimId, \n        bool approve\n    ) external onlyOwner nonReentrant {\n        Claim storage claim = claims[claimId];\n        Policy storage policy = _findUserPolicy(claim.policyId);\n\n        require(claim.status == ClaimStatus.Pending, \"Claim already processed\");\n\n        if (approve) {\n            claim.status = ClaimStatus.Approved;\n            // Transfer claim amount to policyholder\n            payable(policy.policyholder).transfer(claim.claimAmount);\n        } else {\n            claim.status = ClaimStatus.Rejected;\n        }\n\n        // Emit event\n        emit ClaimProcessed(claimId, claim.status);\n    }\n     // Process multiple claims in a single transaction\n    function processBatchClaims(\n        uint256[] memory claimIds, \n        bool[] memory approvalStatuses\n    ) external onlyOwner nonReentrant {\n        require(\n            claimIds.length == approvalStatuses.length, \n            \"Mismatched claims and approval statuses\"\n        );\n\n        for (uint256 i = 0; i < claimIds.length; i++) {\n            Claim storage claim = claims[claimIds[i]];\n            Policy storage policy = _findUserPolicy(claim.policyId);\n\n            require(claim.status == ClaimStatus.Pending, \"Claim already processed\");\n\n            if (approvalStatuses[i]) {\n                claim.status = ClaimStatus.Approved;\n                // Transfer claim amount to policyholder\n                payable(policy.policyholder).transfer(claim.claimAmount);\n            } else {\n                claim.status = ClaimStatus.Rejected;\n            }\n\n            // Emit event for each claim processed\n            emit ClaimProcessed(claimIds[i], claim.status);\n        }\n    }\n\n    // Internal function to find user's policy\n    function _findUserPolicy(\n        uint256 policyId\n    ) internal view returns (Policy storage) {\n        Policy[] storage policies = userPolicies[msg.sender];\n        for (uint256 i = 0; i < policies.length; i++) {\n            if (policies[i].id == policyId) {\n                return policies[i];\n            }\n        }\n        revert(\"Policy not found\");\n    }\n\n    // Calculate premium based on coverage amount\n    function calculatePremium(\n        uint256 coverageAmount\n    ) internal pure returns (uint256) {\n        // Simplified premium calculation\n        // Premium is between 5-20% of coverage amount\n        uint256 premiumPercentage = MIN_PREMIUM_PERCENTAGE + \n            ((coverageAmount * (MAX_PREMIUM_PERCENTAGE - MIN_PREMIUM_PERCENTAGE)) / MAX_COVERAGE);\n        \n        return (coverageAmount * premiumPercentage) / 1000000;\n        // return 0.01;\n    }\n//     function calculatePremium(uint256 coverageAmount) internal pure returns (uint256) {\n//         uint256 val=0.001;\n//     return uint256(0.001);\n// }\n\n    // Withdraw contract balance (only owner)\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    // Fallback and receive functions\n    receive() external payable {}\n    fallback() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}